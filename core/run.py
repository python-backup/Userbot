import asyncio
import os
import random
import json
from termcolor import colored
from pathlib import Path
from core.config import BOT_CONFIG_DIR, USER_MODULES_DIR
from core.database import ensure_db_exists, get_sessions
from core.userbot import setup_userbot_session, run_userbot_session
from core.utils import cleanup_processes
from core.inline_bot import run_inline_bot

def get_prefix() -> str:
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞"""
    config_path = Path("bot_config/config.json")
    try:
        if config_path.exists():
            with open(config_path, 'r') as f:
                config = json.load(f)
                return config.get("prefix", "!")
        return "!"  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
    except Exception as e:
        print(colored(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞: {e}", "yellow"))
        return "!"

async def spinning_rux():
    frames = [
        "üÖ° üÖ§ üÖß",
        "üÜÅ üÜÑ üÜá", 
        "‚ìá ‚ìä ‚ìç",
        "‚Ñù ùïå ùïè",
        "ùêë ùêî ùêó",
        "ùëÖ ùëà ùëã",
        "ùñ± ùñ¥ ùñ∑",
        "ùì° ùì§ ùìß",
        "‚Ñú ùîò ùîõ",
        "‚Ñù ùïå ùïè"
    ]
    for frame in frames:
        print(f"\r{frame}", end="", flush=True)
        await asyncio.sleep(0.1)

async def print_loading_animation():
    steps = [
        ("üßô‚Äç‚ôÇÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∏–∏ RUX...", 10),
        ("üåæ –ü—Ä–æ—Ä–∞—â–∏–≤–∞–µ–º –∫–æ–¥...", 20),
        ("‚ö° –ó–∞—Ä—è–∂–∞–µ–º —à—É—Ç–∫–∏...", 30), 
        ("ü§ñ –ë—É–¥–∏–º –±–æ—Ç–æ–≤...", 45),
        ("üßπ –£–±–∏—Ä–∞–µ–º –±–∞–≥–∏...", 55),
        ("‚òï –ó–∞–≤–∞—Ä–∏–≤–∞–µ–º –∫–æ—Ñ–µ...", 65),
        ("üéµ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤—É–∫–∏...", 75),
        ("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...", 85),
        ("ü§π‚Äç‚ôÇÔ∏è –†–∞–∑–º–∏–Ω–∞–µ–º —Å–µ—Ä–≤–µ—Ä–∞...", 90),
        ("üöÄ –ü–æ–µ—Ö–∞–ª–∏!", 100)
    ]
    
    print(colored("\n[    ] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É:", "magenta"))
    await spinning_rux()
    
    for text, progress in steps:
        color = random.choice(["yellow", "cyan", "magenta", "green"])
        bar_length = 30
        filled = int(bar_length * progress / 100)
        bar = "[" + "‚ñà" * filled + " " * (bar_length - filled) + "]"
        
        if progress == 100:
            bar = colored(bar, "green", attrs=["blink", "bold"])
            text = colored(text, "green", attrs=["bold"])
        elif progress > 85:
            bar = colored(bar, "cyan", attrs=["bold"])
        elif progress > 60:
            bar = colored(bar, "yellow")
        
        print(f"\r{bar} {progress}% {colored(text, color)}", end="", flush=True)
        delay = 0.2 + (progress / 100) * 0.5
        await asyncio.sleep(delay)
    
    print("\n")

async def main():
    os.makedirs(BOT_CONFIG_DIR, exist_ok=True)
    os.makedirs(USER_MODULES_DIR, exist_ok=True)
    ensure_db_exists()
    
    print(colored(r"""
          ____  _    ___  _
         /  __\/ \ /\\  \//
         |  \/|| | || \  / 
         |    /| \_/| /  \ 
         \_/\_\\____//__/\\
                  
    """, "blue"))
    print(colored("=== ü§ñ RUX UserBot System ===", "blue", attrs=["bold"]))
    print(colored("‚ö° –í–µ—Ä—Å–∏—è 17.1 | –ö–≤–∞–Ω—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫", "magenta"))
    
    await print_loading_animation()

    sessions = get_sessions()
    if not sessions:
        print(colored("\nü§∑ –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...", "yellow"))
        if not await setup_userbot_session():
            print(colored("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞", "red"))
            return
        sessions = get_sessions()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –î–û –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    current_prefix = get_prefix()
    inline_process = await run_inline_bot()
    
    try:
        userbot_tasks = [
            asyncio.create_task(run_userbot_session(session))
            for session in sessions
        ]
        
        print(colored(r"""
         _____   _   _   _____ 
        |  ___| | | | | |  _  |
        | |__   | | | | | | | |
        |  __|  | | | | | | | |
        | |___  | |_| | | |_| |
        \____/   \___/  \_____/
        """, "green"))
        print(colored("üéâ RUX —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", "green", attrs=["bold"]))
        print(colored(f"üëâ –í–≤–µ–¥–∏—Ç–µ {current_prefix}help –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π", "cyan"))
        print(colored("üí° –°–æ–≤–µ—Ç –¥–Ω—è: –ù–µ –≤–µ—Ä—å—Ç–µ —Ç–µ—Å—Ç–µ—Ä–∞–º –Ω–∞ 1–º –∫—É—Ä—Å–µ", "yellow"))
        
        await asyncio.gather(*userbot_tasks)
        
    except KeyboardInterrupt:
        print(colored("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", "yellow"))
    except Exception as e:
        print(colored(f"‚ùå –û—à–∏–±–∫–∞: {e}", "red"))
    finally:
        if inline_process:
            await cleanup_processes([inline_process])
        print(colored("\nüî¥ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "red"))
        print(colored("üò¥ RUX –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...", "blue"))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(colored("\nüõë –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "yellow"))
    except Exception as e:
        print(colored(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "red"))