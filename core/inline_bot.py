import subprocess
import sys
import time
import asyncio
from termcolor import colored
import os
from typing import Optional
from aiogram import Bot
from core.config import INLINE_BOT_SCRIPT, INLINE_BOT_USERNAME
from core.database import (
    get_inline_bot_token, 
    add_inline_bot,
    get_inline_bot_username,
    update_inline_bot_username
)

async def setup_inline_bot() -> bool:
    token = get_inline_bot_token()
    if token:
        print(colored("\n–ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "green"))
        if not get_inline_bot_username():
            print(colored("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: username –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "yellow"))
        return True
    return False

async def create_inline_bot(client: 'TelegramClient') -> bool:
    print(colored("\n‚åõ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather...", "cyan"))
    
    try:
        async with client.conversation('BotFather', timeout=60) as conv:
            await conv.send_message('/newbot')
            await asyncio.sleep(3)
            response = await conv.get_response()
            
            if "Alright" not in response.text:
                print(colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞. –û—Ç–≤–µ—Ç BotFather:", "red"))
                print(colored(response.text, "yellow"))
                return False
            
            bot_name = f"RUX_Inline_{int(time.time())}"
            await conv.send_message(bot_name)
            await asyncio.sleep(3)
            response = await conv.get_response()
            
            if "Good" not in response.text:
                print(colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–¥–∞—Ç—å –∏–º—è –±–æ—Ç–∞. –û—Ç–≤–µ—Ç BotFather:", "red"))
                print(colored(response.text, "yellow"))
                return False
            
            bot_username = f"rux_inline_{int(time.time())}_bot"
            await conv.send_message(bot_username)
            await asyncio.sleep(5)
            response = await conv.get_response()
            
            print(colored("üìÑ –û—Ç–≤–µ—Ç BotFather –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:", "blue"))
            print(colored(response.text, "yellow"))
            
            token = None
            if '`' in response.text:
                token = response.text.split('`')[1].split('`')[0]
            else:
                for line in response.text.split('\n'):
                    if "token" in line.lower() and ":" in line:
                        token_part = line.split(':')[-1].strip().replace('`', '')
                        if ':' in token_part and token_part.split(':')[0].isdigit() and len(token_part.split(':')[1]) > 0:
                            token = token_part
                            break
            
            if not token:
                print(colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:", "red"))
                print(colored(response.text, "yellow"))
                return False
            
            if not (token.count(':') == 1 and token.split(':')[0].isdigit() and len(token.split(':')[1]) > 0):
                print(colored(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {token}", "red"))
                return False
            
            if add_inline_bot(token, bot_username):
                await conv.send_message("/setinline")
                await asyncio.sleep(3)
                await conv.send_message(f"@{bot_username}")
                await asyncio.sleep(3)
                await conv.send_message("rux")
                await asyncio.sleep(3)
                
                await conv.send_message("/setuserpic")
                await asyncio.sleep(3)
                await conv.send_message(f"@{bot_username}")
                await asyncio.sleep(3)
                await conv.send_file("core/data/image.jpg")
                print(colored(f"‚úÖ –ò–Ω–ª–∞–π–Ω-–±–æ—Ç @{bot_username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–æ–∫–µ–Ω: {token}", "green"))
                return True
            else:
                print(colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "red"))
                return False
            
    except Exception as e:
        print(colored(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}", "red"))
        return False

async def run_inline_bot() -> Optional[subprocess.Popen]:
    try:
        if not os.path.exists(INLINE_BOT_SCRIPT):
            raise FileNotFoundError(f"–§–∞–π–ª {INLINE_BOT_SCRIPT} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        process = subprocess.Popen(
            [sys.executable, INLINE_BOT_SCRIPT],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            stdin=subprocess.PIPE,
            text=True
        )
        
        print(colored("üü¢ –ò–Ω–ª–∞–π–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ", "green"))
        return process
        
    except Exception as e:
        print(colored(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–∞: {e}", "red"))
        return None

def get_inline_bot() -> Optional[Bot]:
    token = get_inline_bot_token()
    if token:
        return Bot(token=token)
    return None

async def update_bot_username(new_username: str) -> bool:
    if not new_username.startswith('@'):
        new_username = f"@{new_username}"
    
    if update_inline_bot_username(new_username):
        print(colored(f"‚úÖ Username –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_username}", "green"))
        return True
    else:
        print(colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å username –±–æ—Ç–∞", "red"))
        return False