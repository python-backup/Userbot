import os
import shutil
import tempfile
from datetime import datetime
from pathlib import Path
from telethon import types
from module.loader import ModuleBase
import zipfile

class BackupModule(ModuleBase):
    
    NAME = "Backup"
    DESCRIPTION = "–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–∞–ø–∞–º–∏"
    EMOJI = "üíæ"
    VERSION = "1.1"  # –û–±–Ω–æ–≤–∏–ª–∏ –≤–µ—Ä—Å–∏—é
    
    async def backup_cmd(self, event):

        args = event.pattern_match.group(1).strip().split()
        
        if not args:
            await event.respond("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±—ç–∫–∞–ø–∞\n–ü—Ä–∏–º–µ—Ä: `!backup main.py`")
            return
            
        source_file = args[0]
        dest_name = args[1] if len(args) > 1 else source_file
        
        if not os.path.exists(source_file):
            await event.respond(f"‚õî –§–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        try:
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_file = os.path.join(temp_dir, dest_name)
                shutil.copy2(source_file, temp_file)
                await event.respond(
                    f"üìÅ –ë—ç–∫–∞–ø —Ñ–∞–π–ª–∞ `{source_file}`",
                    file=temp_file
                )
                if self.DEBUG:
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞: {source_file}")
        except Exception as e:
            await event.respond(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}")
            if self.DEBUG:
                print(f"–û—à–∏–±–∫–∞ –≤ backup_cmd: {str(e)}")
    
    async def backup_module_cmd(self, event):

        args = event.pattern_match.group(1).strip()
        
        if not args:
            await event.respond("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –±—ç–∫–∞–ø–∞\n–ü—Ä–∏–º–µ—Ä: `!backup_module backup`")
            return
            
        module_name = args + '.py'
        system_path = os.path.join("module", "system", module_name)
        user_path = os.path.join("module", "user", module_name)
        
        source_file = None
        if os.path.exists(system_path):
            source_file = system_path
        elif os.path.exists(user_path):
            source_file = user_path
        else:
            await event.respond(f"‚õî –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ system, –Ω–∏ –≤ user –º–æ–¥—É–ª—è—Ö")
            return
            
        try:
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_file = os.path.join(temp_dir, module_name)
                shutil.copy2(source_file, temp_file)
                await event.respond(
                    f"üì¶ –ë—ç–∫–∞–ø –º–æ–¥—É–ª—è `{module_name}`",
                    file=temp_file
                )
                if self.DEBUG:
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±—ç–∫–∞–ø –º–æ–¥—É–ª—è: {module_name}")
        except Exception as e:
            await event.respond(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –º–æ–¥—É–ª—è: {str(e)}")
            if self.DEBUG:
                print(f"–û—à–∏–±–∫–∞ –≤ backup_module_cmd: {str(e)}")
    
    async def backup_all_cmd(self, event):
        try:
            with tempfile.TemporaryDirectory() as temp_dir:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                zip_name = f"bot_backup_{timestamp}.zip"
                zip_path = os.path.join(temp_dir, zip_name)
                
                with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    if os.path.exists("main.py"):
                        zipf.write("main.py", "main.py")
                    
                    if os.path.exists("bot_config"):
                        for root, dirs, files in os.walk("bot_config"):
                            for file in files:
                                file_path = os.path.join(root, file)
                                arcname = os.path.relpath(file_path, start=".")
                                zipf.write(file_path, arcname)
                    
                    system_dir = os.path.join("module", "system")
                    if os.path.exists(system_dir):
                        for root, dirs, files in os.walk(system_dir):
                            for file in files:
                                if file.endswith('.py') and not file.startswith('__'):
                                    file_path = os.path.join(root, file)
                                    arcname = os.path.relpath(file_path, start=".")
                                    zipf.write(file_path, arcname)
                    
                    user_dir = os.path.join("module", "user")
                    if os.path.exists(user_dir):
                        for root, dirs, files in os.walk(user_dir):
                            for file in files:
                                if file.endswith('.py') and not file.startswith('__'):
                                    file_path = os.path.join(root, file)
                                    arcname = os.path.relpath(file_path, start=".")
                                    zipf.write(file_path, arcname)
                
                await event.respond(
                    "üì¶ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –±–æ—Ç–∞",
                    file=zip_path
                )
                
                if self.DEBUG:
                    print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –±–æ—Ç–∞")
                    
        except Exception as e:
            await event.respond(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {str(e)}")
            if self.DEBUG:
                print(f"–û—à–∏–±–∫–∞ –≤ backup_all_cmd: {str(e)}")