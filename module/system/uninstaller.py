from module.loader import System, load_all_modules
from telethon import events
import os
import asyncio
import sys
from termcolor import colored
import inspect

NAME = "–æ—á–∏—Å—Ç–∫–∞"
DESCRIPTION = "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π"
EMOJI = "üßπ"
VERSION = "1.0"
AUTHOR = "—Å–∏—Å—Ç–µ–º–∞"

class Uninstaller(System):
    def __init__(self, client, db_path="bot_config/bot_data.db"):
        super().__init__(client, db_path)
        self.name = NAME
        self.description = DESCRIPTION 
        self.emoji = EMOJI
        self.version = VERSION 
        self.author = AUTHOR

    async def uninstall_cmd(self, event):
        if not await self.check_admin(event):
            msg = await event.respond("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            await asyncio.sleep(3)
            await msg.delete()
            return
            
        args = event.pattern_match.group(1)
        if not args:
            msg = await event.respond("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑ –ø–æ–º–æ—â–∏: !uninstall <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
            await asyncio.sleep(5)
            await msg.delete()
            return
            
        module_name = args.strip().lower()
        await self._uninstall_module_by_display_name(event, module_name)
    
    async def _uninstall_module_by_display_name(self, event, display_name):
        user_modules_dir = os.path.join(
            os.path.dirname(os.path.dirname(__file__)), 
            'user'
        )
        
        modules = self.client.loaded_modules.get('user', {})
        
        found_module = None
        for file_name, module_data in modules.items():
            if module_data['name'].lower() == display_name:
                found_module = file_name
                break
        
        if not found_module:
            await event.respond(f"‚ùå –ú–æ–¥—É–ª—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{display_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if found_module in ['installer', 'uninstaller']:
            await event.respond("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏!")
            return
            
        module_path = os.path.join(user_modules_dir, f"{found_module}.py")
        
        if not os.path.exists(module_path):
            await event.respond(f"‚ùå –§–∞–π–ª –º–æ–¥—É–ª—è '{found_module}.py' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        try:
            await self._purge_all_handlers()

            os.remove(module_path)
            pyc_path = os.path.join(user_modules_dir, f"{found_module}.pyc")
            if os.path.exists(pyc_path):
                os.remove(pyc_path)

            self.client.loaded_modules = load_all_modules(self.client, self.db_path)

            await event.respond(f"‚úÖ –ú–æ–¥—É–ª—å '{module_data['name']}' (—Ñ–∞–π–ª: {found_module}.py) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!")
            print(colored(f"–ú–æ–¥—É–ª—å {found_module} —É–¥–∞–ª—ë–Ω, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", "green"))
            
        except Exception as e:
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
            print(colored(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {found_module}: {str(e)}", "red"))

    async def _purge_all_handlers(self):

        handlers = self.client.list_event_handlers()
        
        for handler in handlers:
            if isinstance(handler, events.NewMessage):
                try:
                    self.client.remove_event_handler(handler.callback)
                except Exception as e:
                    print(colored(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {str(e)}", "yellow"))
        
        if hasattr(self.client, '_event_builders'):
            self.client._event_builders.clear()