# module/system/session.py
import os
from telethon import errors
from telethon.sync import TelegramClient
from main import SessionManager, generate_session_name
from module.loader import System

NAME = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏"
DESCRIPTION = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Å—Å–∏–π –±–æ—Ç–∞"
EMOJI = "üîÑ"
VERSION = "1.0"
AUTHOR = "system"

class Session(System):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –±–æ—Ç–∞"""
    
    def __init__(self, client, db_path):
        super().__init__(client, db_path)
        self.name = NAME
        self.description = DESCRIPTION
        self.emoji = EMOJI
        self.author = AUTHOR
        self.version = VERSION
        self.manager = SessionManager(db_path)
        self.active_auth = {}  # {chat_id: {'state': str, 'client': TelegramClient, ...}}
        self.session_dir = "bot_config"  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
        
        os.makedirs(self.session_dir, exist_ok=True)

    async def _create_client(self, session_name, api_id, api_hash):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º"""
        session_file = os.path.join(self.session_dir, f"session_{session_name}")
        client = TelegramClient(
            session=session_file,
            api_id=api_id,
            api_hash=api_hash,
            device_model="UserBot (Non-Interactive)"
        )
        client.flood_sleep_threshold = 0
        client.parse_mode = 'html'
        return client

    async def session_add_cmd(self, event):
        """!sessionadd - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏)"""
        if not (reply_msg := await event.get_reply_message()):
            await event.respond("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                              "API_ID API_HASH –ù–û–ú–ï–†_–¢–ï–õ–ï–§–û–ù–ê [–ü–ê–†–û–õ–¨_2FA]")
            return
        
        try:
            parts = reply_msg.text.split()
            if len(parts) < 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            api_id = int(parts[0])
            api_hash = parts[1]
            phone = parts[2]
            password = parts[3] if len(parts) > 3 else None
            
            session_name = generate_session_name()
            client = await self._create_client(session_name, api_id, api_hash)
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
            if await client.is_user_authorized():
                await event.respond("‚ÑπÔ∏è –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
                await self._finalize_session(event, {
                    'client': client,
                    'api_id': api_id,
                    'api_hash': api_hash,
                    'phone': phone,
                    'password': password,
                    'session_name': session_name
                })
                return
            
            self.active_auth[event.chat_id] = {
                'state': 'awaiting_code',
                'client': client,
                'api_id': api_id,
                'api_hash': api_hash,
                'phone': phone,
                'password': password,
                'session_name': session_name
            }
            
            sent_code = await client.send_code_request(phone)
            self.active_auth[event.chat_id]['phone_code_hash'] = sent_code.phone_code_hash
            
            await event.respond(
                "üì≤ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!code X-X-X-X-X`\n"
                "(–≥–¥–µ X-X-X-X-X - –∫–æ–¥ –∏–∑ 5 —Ü–∏—Ñ—Ä)"
            )

        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            if event.chat_id in self.active_auth:
                await self._cleanup_auth(event.chat_id)

    async def code_cmd(self, event):
        """!code - –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏"""
        if event.chat_id not in self.active_auth or self.active_auth[event.chat_id]['state'] != 'awaiting_code':
            await event.respond("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø")
            return
        
        try:
            code = event.pattern_match.group(1).strip().replace('-', '')
            if not code.isdigit() or len(code) != 5:
                raise ValueError("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä (—Ñ–æ—Ä–º–∞—Ç: X-X-X-X-X)")
            
            auth_data = self.active_auth[event.chat_id]
            client = auth_data['client']
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if await client.is_user_authorized():
                await event.respond("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
                await self._finalize_session(event, auth_data)
                return
            
            try:
                await client.sign_in(
                    auth_data['phone'],
                    code=code,
                    phone_code_hash=auth_data['phone_code_hash']
                )
                await event.respond("‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                
            except errors.SessionPasswordNeededError:
                if not auth_data.get('password'):
                    await event.respond(
                        "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!password –≤–∞—à_–ø–∞—Ä–æ–ª—å`"
                    )
                    self.active_auth[event.chat_id]['state'] = 'awaiting_password'
                    return
                
                await client.sign_in(password=auth_data['password'])
                await event.respond("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            await self._finalize_session(event, auth_data)
            
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await self._cleanup_auth(event.chat_id)

    async def password_cmd(self, event):
        """!password - –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if (event.chat_id not in self.active_auth or 
            self.active_auth[event.chat_id]['state'] != 'awaiting_password'):
            await event.respond("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–µ–≥–æ –ø–∞—Ä–æ–ª—å")
            return
        
        try:
            password = event.pattern_match.group(1).strip()
            if not password:
                raise ValueError("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            
            auth_data = self.active_auth[event.chat_id]
            client = auth_data['client']
            auth_data['password'] = password
            
            await client.sign_in(password=password)
            await event.respond("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            await self._finalize_session(event, auth_data)
            
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await self._cleanup_auth(event.chat_id)

    async def _finalize_session(self, event, auth_data):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é"""
        client = auth_data['client']
        session_file = os.path.join(self.session_dir, f"session_{auth_data['session_name']}")
        
        try:
            if not await client.is_user_authorized():
                raise Exception("–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            
            me = await client.get_me()
            session_data = self.manager.add_session(
                api_id=auth_data['api_id'],
                api_hash=auth_data['api_hash'],
                phone=auth_data['phone'],
                session_name=auth_data['session_name'],
                password=auth_data.get('password')
            )
            
            await event.respond(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üîπ <b>–ò–º—è —Å–µ—Å—Å–∏–∏:</b> {session_data['session_name']}\n"
                f"üîπ <b>ID —Å–µ—Å—Å–∏–∏:</b> {session_data['session_id']}\n"
                f"üîπ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{me.username}\n"
                f"üîπ <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {session_data['phone']}\n\n"
                f"–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"
            )
            
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            if os.path.exists(f"{session_file}.session"):
                os.remove(f"{session_file}.session")
        finally:
            if event.chat_id in self.active_auth:
                del self.active_auth[event.chat_id]
            if client.is_connected():
                await client.disconnect()

    async def _cleanup_auth(self, chat_id):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if chat_id in self.active_auth:
            auth_data = self.active_auth[chat_id]
            if 'client' in auth_data and auth_data['client'].is_connected():
                await auth_data['client'].disconnect()
            if 'session_name' in auth_data:
                session_file = os.path.join(self.session_dir, f"session_{auth_data['session_name']}")
                if os.path.exists(f"{session_file}.session"):
                    os.remove(f"{session_file}.session")
            del self.active_auth[chat_id]