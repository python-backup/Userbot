# system/config.py
from ..loader import System
from telethon import events
import json

NAME = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
DESCRIPTION = "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rux"
EMOJI = "‚öôÔ∏è"
AUTHOR = "system"
VERSION = "1.0"

class ModConfig(System):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –º–æ–¥—É–ª–µ–π"""
    def __init__(self, client, db_path="bot_config/bot_data.db"):
        super().__init__(client, db_path)
        self.name = NAME
        self.description = DESCRIPTION
        self.emoji = EMOJI
        self.author = AUTHOR

    async def config_cmd(self, event):
        """!config - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not await self.check_admin(event):
            return
        
        modules = self.client.loaded_modules
        text = "**‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:**\n\n"
        
        for mtype in modules:
            for mod_name, mod_data in modules[mtype].items():
                status = "‚úÖ" if mod_data['status'] == '‚úÖ' else "‚ùå"
                text += (
                    f"{mod_data['emoji']} **{mod_name}** ({mtype})\n"
                    f"–í–µ—Ä—Å–∏—è: {mod_data['version']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"–ö–æ–º–∞–Ω–¥—ã: `{'`, `'.join(mod_data['commands'])}`\n\n"
                )
        
        await event.respond(text)

    async def config_keys_cmd(self, event):
        """!config keys <–º–æ–¥—É–ª—å> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è"""
        if not await self.check_admin(event):
            return
        
        module_name = event.pattern_match.group(1).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        found_module = None
        for mtype in self.client.loaded_modules:
            if module_name in self.client.loaded_modules[mtype]:
                found_module = self.client.loaded_modules[mtype][module_name]
                break
        
        if not found_module:
            await event.respond(f"‚ùå –ú–æ–¥—É–ª—å `{module_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
        module_config = await self.module_config(module_name)
        
        if not module_config:
            await event.respond(f"‚ÑπÔ∏è –ú–æ–¥—É–ª—å `{module_name}` –Ω–µ –∏–º–µ–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
        
        text = f"**üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {module_name}:**\n\n"
        
        for key, value in module_config.items():
            text += f"‚Ä¢ **{key}** = `{value}`\n"
        
        text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!config set <–º–æ–¥—É–ª—å> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>` –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        await event.respond(text)

    async def config_set_cmd(self, event):
        """!config set <–º–æ–¥—É–ª—å> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ> - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–¥—É–ª—è"""
        if not await self.check_admin(event):
            return
        
        args = event.pattern_match.group(1).split()
        if len(args) < 3:
            await event.respond("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `!config set <–º–æ–¥—É–ª—å> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>`")
            return
        
        module_name, key, value = args[0], args[1], " ".join(args[2:])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        found = False
        for mtype in self.client.loaded_modules:
            if module_name in self.client.loaded_modules[mtype]:
                found = True
                break
        
        if not found:
            await event.respond(f"‚ùå –ú–æ–¥—É–ª—å `{module_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ú–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await self.module_config(module_name, key, value)
        await event.respond(f"**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:**\n`{module_name}.{key} = {value}`")

    async def config_toggle_cmd(self, event):
        """!config toggle <–º–æ–¥—É–ª—å> - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å"""
        if not await self.check_admin(event):
            return
        
        module_name = event.pattern_match.group(1).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å
        found = False
        for mtype in self.client.loaded_modules:
            if module_name in self.client.loaded_modules[mtype]:
                found = True
                break
        
        if not found:
            await event.respond(f"‚ùå –ú–æ–¥—É–ª—å `{module_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        current = await self.module_config(module_name, "enabled")
        new_status = not bool(current) if current is not None else False
        await self.module_config(module_name, "enabled", new_status)
        
        await event.respond(
            f"**{'‚úÖ –í–∫–ª—é—á–µ–Ω' if new_status else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'} –º–æ–¥—É–ª—å:** `{module_name}`\n"
            f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ (`!restart`), —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É."
        )