from module.loader import User
from telethon import events
import json
import os

NAME = "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"
DESCRIPTION = "–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º"
EMOJI = "üåç"
VERSION = "1.0"
AUTHOR = "system"

class TranslatorModule(User):
    
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–ª–æ–≤–∞—Ä—è
    DICT_PATH = "bot_config/slovar.json"
    
    def __init__(self, client, db_path="bot_config/bot_data.db"):
        super().__init__(client, db_path)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.translations = self.load_dictionary()
        self.name = NAME
        self.description = DESCRIPTION
        self.emoji = EMOJI
        self.author = AUTHOR
        self.version = VERSION
 
    def load_dictionary(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            os.makedirs(os.path.dirname(self.DICT_PATH), exist_ok=True)
            
            if os.path.exists(self.DICT_PATH):
                with open(self.DICT_PATH, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                default_dict = {
                    "ru_en": {
                        "–ø—Ä–∏–≤–µ—Ç": "hello", "–º–∏—Ä": "world", "–¥–æ–º": "house", "–≤–æ–¥–∞": "water", "–æ–≥–æ–Ω—å": "fire", 
                        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞)
                    },
                    "en_ru": {
                        "hello": "–ø—Ä–∏–≤–µ—Ç", "world": "–º–∏—Ä", "house": "–¥–æ–º", "water": "–≤–æ–¥–∞", "fire": "–æ–≥–æ–Ω—å",
                        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞)
                    }
                }
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                self.save_dictionary(default_dict)
                return default_dict
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
            return {"ru_en": {}, "en_ru": {}}
    
    def save_dictionary(self, data=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.DICT_PATH, 'w', encoding='utf-8') as f:
                json.dump(data or self.translations, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {e}")

    async def translate_cmd(self, event):
        """!translate - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !translate <—Ç–µ–∫—Å—Ç>
        #public"""
        text = event.pattern_match.string.split(' ', 1)[1] if ' ' in event.pattern_match.string else None
        
        if not text:
            await event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä: !translate –ü—Ä–∏–≤–µ—Ç")
            return
            
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text.lower()):
            direction = "ru_en"
            lang_name = "—Ä—É—Å ‚Üí –∞–Ω–≥–ª"
        else:
            direction = "en_ru"
            lang_name = "–∞–Ω–≥–ª ‚Üí —Ä—É—Å"
        
        # –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
        result = self.translations[direction].get(
            text.lower(), 
            "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        
        await event.reply(f"{result}")

    async def addword_cmd(self, event):
        """!addword - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !addword <—Å–ª–æ–≤–æ> <–ø–µ—Ä–µ–≤–æ–¥>"""
        if not await self.check_admin(event):
            return
            
        args = event.pattern_match.string.split(' ', 2)[1:] if ' ' in event.pattern_match.string else []
        
        if len(args) < 2:
            await event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥!\n–ü—Ä–∏–º–µ—Ä: !addword hello –ø—Ä–∏–≤–µ—Ç")
            return
            
        word, translation = args[0], args[1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in word.lower()):
            self.translations["ru_en"][word.lower()] = translation.lower()
            reverse_dir = "en_ru"
        else:
            self.translations["en_ru"][word.lower()] = translation.lower()
            reverse_dir = "ru_en"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        self.translations[reverse_dir][translation.lower()] = word.lower()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        self.save_dictionary()
        
        await event.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {word} ‚Üî {translation}")