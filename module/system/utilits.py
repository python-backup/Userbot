from module.loader import User
import requests
from forex_python.converter import CurrencyRates
import math
import re
import random
import asyncio
from googletrans import Translator
from bs4 import BeautifulSoup
import feedparser
from datetime import datetime

class UtilityTools(User):
    
    NAME = "utility_tools"
    DESCRIPTION = "–ú–æ–¥—É–ª—å —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏: –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, —Ç–∞–π–º–µ—Ä, —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, —Ñ–∞–∫—Ç—ã, –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–≥–æ–¥–∞"
    EMOJI = "üõ†Ô∏è"
    VERSION = "2.2"
    AUTHOR = "DigitalEternities"
    
    def __init__(self, client, db_path="bot_config/bot_data.db"):
        super().__init__(client, db_path)
        self.c = CurrencyRates(force_decimal=True)
        self.translator = Translator(service_urls=[
            'translate.google.com',
            'translate.google.ru'
        ])
        
        self.facts = [
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞ –¥–µ–Ω—å –±–æ–ª—å—à–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∏–º–ø—É–ª—å—Å–æ–≤, —á–µ–º –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –º–∏—Ä–∞ –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã–µ.",
            "üåå –í –∫–æ—Å–º–æ—Å–µ –µ—Å—Ç—å –∞–ª–º–∞–∑–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ (BPM 37093), —Ä–∞–∑–º–µ—Ä–æ–º —Å –Æ–ø–∏—Ç–µ—Ä.",
            "ü¶á –õ–µ—Ç—É—á–∏–µ –º—ã—à–∏ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ, —Å–ø–æ—Å–æ–±–Ω—ã–µ –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–æ–ª—ë—Ç—É (–∞ –Ω–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é).",
            "üìÖ –í 1903 –≥–æ–¥—É –±—Ä–∞—Ç—å—è –†–∞–π—Ç —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ–ª—ë—Ç –Ω–∞ —Å–∞–º–æ–ª—ë—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –¥–ª–∏–ª—Å—è –≤—Å–µ–≥–æ 12 —Å–µ–∫—É–Ω–¥.",
            "üêú –ú—É—Ä–∞–≤—å–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç ‚Äî —É –Ω–∏—Ö –Ω–µ—Ç –≤–µ–∫, –Ω–æ –æ–Ω–∏ –æ—Ç–¥—ã—Ö–∞—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏.",
            "üî• –û–≥–æ–Ω—å –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–Ω–∏ ‚Äî –¥–∞–∂–µ –≤ —Å–∞–º—ã—Ö —è—Ä–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
            "üçå –ë–∞–Ω–∞–Ω—ã ‚Äî —ç—Ç–æ —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ ‚Äî –Ω–µ—Ç (—Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–æ—Ç–∞–Ω–∏–∫–∏).",
            "üßä –õ—ë–¥ –≥–æ—Ä—è—á–µ–µ, —á–µ–º –≤—ã –¥—É–º–∞–µ—Ç–µ: –ø—Ä–∏ -40¬∞C –æ–Ω –≤—Å—ë –µ—â—ë ¬´–≥–æ—Ä—è—á–µ–µ¬ª –∂–∏–¥–∫–æ–≥–æ –∞–∑–æ—Ç–∞ (-196¬∞C).",
            "ü¶é –•–∞–º–µ–ª–µ–æ–Ω—ã –º–µ–Ω—è—é—Ç —Ü–≤–µ—Ç –Ω–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏, –∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–≥—É–ª—è—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.",
            "üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç—ã SpaceX Falcon Heavy –≤ 2018 –≥–æ–¥—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª—Å—è Tesla Roadster —Å –º–∞–Ω–µ–∫–µ–Ω–æ–º –≤–æ–¥–∏—Ç–µ–ª—è.",
            "üß¨ –£ —á–µ–ª–æ–≤–µ–∫–∞ –∏ —à–∏–º–ø–∞–Ω–∑–µ 98.7% –æ–±—â–∏—Ö –≥–µ–Ω–æ–≤.",
            "üåï –ù–∞ –õ—É–Ω–µ –µ—Å—Ç—å –º—É—Å–æ—Ä: –±–æ–ª–µ–µ 180 —Ç–æ–Ω–Ω –æ–±–ª–æ–º–∫–æ–≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.",
            "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å (–∏–∑-–∑–∞ –≥–µ–º–æ—Ü–∏–∞–Ω–∏–Ω–∞ –≤–º–µ—Å—Ç–æ –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞).",
            "üí° –≠–π–Ω—à—Ç–µ–π–Ω —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –≤–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É.",
            "üï∞Ô∏è –°–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ —á–∞—Å—ã –≤ –º–∏—Ä–µ ‚Äî –∞—Ç–æ–º–Ω—ã–µ, –æ–Ω–∏ –æ—à–∏–±–∞—é—Ç—Å—è –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –∑–∞ 15 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ª–µ—Ç.",
            "üåç –ó–µ–º–ª—è –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è: –∫–∞–∂–¥—ã–µ 100 –ª–µ—Ç —Å—É—Ç–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ 1.7 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã.",
            "üçØ –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å 1 –∫–≥ –º—ë–¥–∞, –ø—á–µ–ª–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–ª–µ—Ç–µ—Ç—å 4 –º–ª–Ω —Ü–≤–µ—Ç–∫–æ–≤.",
            "üöó –ü–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –≤—ã–ø–∏—Å–∞–ª–∏ –≤ 1896 –≥–æ–¥—É –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å 13 –∫–º/—á.",
            "ü¶â –°–æ–≤—ã –º–æ–≥—É—Ç –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≥–æ–ª–æ–≤—É –Ω–∞ 270 –≥—Ä–∞–¥—É—Å–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –æ—Å–æ–±–æ–º—É —Å—Ç—Ä–æ–µ–Ω–∏—é —à–µ–∏.",
            "üßÇ –ü–æ–≤–∞—Ä–µ–Ω–Ω–∞—è —Å–æ–ª—å (NaCl) ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏–Ω–µ—Ä–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ –µ—Å—Ç –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ.",
            "üì± –ü–µ—Ä–≤—ã–π SMS-—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 1992 –≥–æ–¥—É –∏ —Å–æ–¥–µ—Ä–∂–∞–ª–æ —Ç–µ–∫—Å—Ç: ¬´–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –†–æ–∂–¥–µ—Å—Ç–≤–∞!¬ª.",
            "ü¶¥ –ö–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–æ—á–Ω–µ–µ —Å—Ç–∞–ª–∏, –µ—Å–ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏—Ö –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –≤–µ—Å–∞ –∏ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏.",
            "üå°Ô∏è –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –ó–µ–º–ª–µ: +56.7¬∞C (–î–æ–ª–∏–Ω–∞ –°–º–µ—Ä—Ç–∏, –°–®–ê).",
            "‚ùÑÔ∏è –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: -89.2¬∞C (–∞–Ω—Ç–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è ¬´–í–æ—Å—Ç–æ–∫¬ª).",
            "üêã –°–µ—Ä–¥—Ü–µ —Å–∏–Ω–µ–≥–æ –∫–∏—Ç–∞ –±—å—ë—Ç—Å—è 5‚Äì10 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
            "üíª –ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å (1982) –∑–∞—Ä–∞–∂–∞–ª –¥–∏—Å–∫–µ—Ç—ã –∏ –Ω–∞–∑—ã–≤–∞–ª—Å—è ¬´Elk Cloner¬ª.",
            "ü™ê –Æ–ø–∏—Ç–µ—Ä –∑–∞—â–∏—â–∞–µ—Ç –ó–µ–º–ª—é –æ—Ç –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤, ¬´–ø—Ä–∏—Ç—è–≥–∏–≤–∞—è¬ª –∏—Ö —Å–≤–æ–µ–π –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π.",
            "üçé –Ø–±–ª–æ–∫–∏ —Ç–æ–Ω—É—Ç –≤ –≤–æ–¥–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–∞ 25% —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –≤–æ–∑–¥—É—Ö–∞ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∞—Ä–±—É–∑–æ–≤).",
            "ü¶¥ –ù–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫ –∏–º–µ–µ—Ç 270 –∫–æ—Å—Ç–µ–π, –∞ –≤–∑—Ä–æ—Å–ª—ã–π ‚Äî –≤—Å–µ–≥–æ 206.",
            "üöø –í–æ–¥–∞ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤ –ø—Ä–∏—Ä–æ–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç—Ä—ë—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö: —Ç–≤—ë—Ä–¥–æ–º, –∂–∏–¥–∫–æ–º –∏ –≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–º.",
            "ü™ô –ú–æ–Ω–µ—Ç–∫–∞, –±—Ä–æ—à–µ–Ω–Ω–∞—è —Å –≠–º–ø–∞–π—Ä-—Å—Ç–µ–π—Ç-–±–∏–ª–¥–∏–Ω–≥, –Ω–µ —É–±—å—ë—Ç —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –æ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Å–µ–≥–æ 80 –∫–º/—á.",
            "üåø –†–∞—Å—Ç–µ–Ω–∏—è ¬´—Å–ª—ã—à–∞—Ç¬ª –∑–≤—É–∫–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –∂—É–∂–∂–∞–Ω–∏–µ –ø—á—ë–ª, —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ –Ω–µ–∫—Ç–∞—Ä–µ.",
            "ü¶¥ –ü—Ä–∞–≤—à–∏ –∂–∏–≤—É—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 9 –ª–µ—Ç –¥–æ–ª—å—à–µ –ª–µ–≤—à–µ–π (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞).",
            "üß≤ –ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ –ó–µ–º–ª–∏ —Å–º–µ—â–∞–µ—Ç—Å—è: –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –ª–µ—Ç –æ–Ω–æ ¬´—Å–¥–≤–∏–Ω—É–ª–æ—Å—å¬ª –Ω–∞ 225 –∫–º.",
            "ü™ê –ü–ª—É—Ç–æ–Ω –º–µ–Ω—å—à–µ –†–æ—Å—Å–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ (17.7 –º–ª–Ω –∫–º¬≤ –ø—Ä–æ—Ç–∏–≤ 17.1 –º–ª–Ω –∫–º¬≤).",
            "üêç –ó–º–µ–∏ –º–æ–≥—É—Ç ¬´–≤–∏–¥–µ—Ç—å¬ª —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏ ‚Äî —É –Ω–∏—Ö –µ—Å—Ç—å –∏–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–æ—Ä—ã.",
            "üìö –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ –º–∏—Ä–µ ‚Äî ¬´–í –ø–æ–∏—Å–∫–∞—Ö —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª –ú–∞—Ä—Å–µ–ª—è –ü—Ä—É—Å—Ç–∞ (1.2 –º–ª–Ω —Å–ª–æ–≤).",
            "ü¶† –í–∏—Ä—É—Å—ã –º–æ–≥—É—Ç –∑–∞—Ä–∞–∂–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∏—Ä—É—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∏—Ä–æ—Ñ–∞–≥ Sputnik).",
            "üßµ –ü–∞—É—Ç–∏–Ω–∞ –ø–∞—É–∫–∞-–∫—Ä—É–≥–æ–ø—Ä—è–¥–∞ –ø—Ä–æ—á–Ω–µ–µ —Å—Ç–∞–ª–∏ —Ç–æ–π –∂–µ —Ç–æ–ª—â–∏–Ω—ã.",
            "üåä –í–æ–¥–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç 71% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏, –Ω–æ —Ç–æ–ª—å–∫–æ 1% –µ—ë –ø—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è –ø–∏—Ç—å—è.",
            "ü¶ï –ö—É—Ä—ã ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –∂–∏–≤—ã–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ —Ç–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä–∞.",
            "üß™ –ó–æ–ª–æ—Ç–æ —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è –≤ —Ä—Ç—É—Ç–∏, –∫–∞–∫ —Å–∞—Ö–∞—Ä –≤ –≤–æ–¥–µ.",
            "üõå –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç —Ç—Ä–µ—Ç—å –∂–∏–∑–Ω–∏ –≤–æ —Å–Ω–µ (–æ–∫–æ–ª–æ 25 –ª–µ—Ç, –µ—Å–ª–∏ –¥–æ–∂–∏–≤—ë—Ç –¥–æ 75).",
            "ü™ê –£ –°–∞—Ç—É—Ä–Ω–∞ –µ—Å—Ç—å —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω—ã–π —à—Ç–æ—Ä–º –Ω–∞ —Å–µ–≤–µ—Ä–Ω–æ–º –ø–æ–ª—é—Å–µ (–¥–∏–∞–º–µ—Ç—Ä ‚Äî 25 000 –∫–º).",
            "üêù –ü—á–µ–ª—ã —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –∫–∞–∫ ¬´—É–∑–æ—Ä—ã¬ª.",
            "üß¥ –ú–æ–ª–Ω–∏—è –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç –≤–æ–∑–¥—É—Ö –≤–æ–∫—Ä—É–≥ —Å–µ–±—è –¥–æ 30 000¬∞C ‚Äî —ç—Ç–æ –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞.",
            "ü¶¥ –í–æ–ª–æ—Å—ã —á–µ–ª–æ–≤–µ–∫–∞ –º–æ–≥—É—Ç –≤—ã–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å –¥–æ 100 –≥—Ä–∞–º–º–æ–≤ (–∞ –≤—Å—è —à–µ–≤–µ–ª—é—Ä–∞ ‚Äî –¥–æ 12 —Ç–æ–Ω–Ω).",
            "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–¥—Ä–∞ –ó–µ–º–ª–∏ (6000¬∞C) —Ä–∞–≤–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞.",
            "ü¶ú –í–æ—Ä–æ–Ω—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–º–Ω—ã, —á—Ç–æ –º–æ–≥—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç—å –æ–±–∏–¥—á–∏–∫–∞–º.",
            "üß≤ –ï—Å–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –ó–µ–º–ª—é –¥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–∏–ª—å—è—Ä–¥–Ω–æ–≥–æ —à–∞—Ä–∞, –æ–Ω–∞ –±—É–¥–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ –≥–ª–∞–¥–∫–æ–π (–ø–µ—Ä–µ–ø–∞–¥—ã –≤—ã—Å–æ—Ç < 0.1 –º–º)."
        ]

    # ========== –ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ==========
    async def convert_cmd(self, event):
        """!convert <amount> <from_currency> to <to_currency> - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É"""
        await event.delete()
        args = event.pattern_match.group(1)
        
        if not args:
            await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!\n–ü—Ä–∏–º–µ—Ä: !convert 100 USD to RUB")
            return
            
        try:
            match = re.match(r'(\d+\.?\d*)\s+([A-Za-z]{3})\s+to\s+([A-Za-z]{3})', args.strip())
            if not match:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                
            amount, from_curr, to_curr = match.groups()
            amount = float(amount)
            from_curr = from_curr.upper()
            to_curr = to_curr.upper()
            
            try:
                result = self.c.convert(from_curr, to_curr, amount)
                await event.respond(f"üí± {amount:.2f} {from_curr} = {result:.2f} {to_curr}")
            except Exception as api_error:
                await self.fallback_convert(event, amount, from_curr, to_curr)
                
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}\n–ü—Ä–∏–º–µ—Ä: !convert 100 USD to RUB")

    async def fallback_convert(self, event, amount, from_curr, to_curr):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫—É—Ä—Å—ã
            rates = {
                "USD": {"RUB": 90.0, "EUR": 0.92, "GBP": 0.79, "JPY": 151.5, "CNY": 7.23},
                "EUR": {"RUB": 98.0, "USD": 1.08, "GBP": 0.86, "JPY": 164.5, "CNY": 7.86},
                "RUB": {"USD": 0.011, "EUR": 0.010, "GBP": 0.0086, "JPY": 1.68, "CNY": 0.080},
                "GBP": {"USD": 1.27, "EUR": 1.16, "RUB": 116.5, "JPY": 191.5, "CNY": 9.15},
                "JPY": {"USD": 0.0066, "EUR": 0.0061, "RUB": 0.60, "GBP": 0.0052, "CNY": 0.048},
                "CNY": {"USD": 0.14, "EUR": 0.13, "RUB": 12.5, "GBP": 0.11, "JPY": 20.8}
            }
            
            if from_curr in rates and to_curr in rates[from_curr]:
                result = amount * rates[from_curr][to_curr]
                await event.respond(f"üí± (–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å) {amount:.2f} {from_curr} ‚âà {result:.2f} {to_curr}")
            else:
                raise ValueError("–í–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        except Exception as e:
            await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # ========== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ==========
    async def calc_cmd(self, event):
        """!calc <expression> - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        await event.delete()
        args = event.pattern_match.group(1)
        
        if not args:
            help_text = (
                "üßÆ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:\n"
                "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: + - * / \n"
                "‚Ä¢ –°—Ç–µ–ø–µ–Ω–∏: 2^3 –∏–ª–∏ 2**3\n"
                "‚Ä¢ –ö–æ—Ä–Ω–∏: sqrt(9)\n"
                "‚Ä¢ –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—é: sin(30), cos(45), tan(60)\n"
                "‚Ä¢ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: pi, e\n"
                "‚Ä¢ –§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã: 5!\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n!calc 2*(3+4)^2\n!calc sin(30) + cos(45)"
            )
            await event.respond(help_text)
            return
            
        try:
            expr = args.replace(" ", "").replace("^", "**")
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if not re.match(r'^[\d+\-*/().!^‚àöœÄesincostanlog\s]+$', expr):
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")
                
            expr = expr.replace("‚àö", "sqrt")
            
            safe_dict = {
                'sqrt': math.sqrt,
                'sin': math.sin,
                'cos': math.cos,
                'tan': math.tan,
                'log': math.log,
                'pi': math.pi,
                'e': math.e,
                '__builtins__': None
            }
            
            def factorial(n):
                if n > 100:
                    raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞")
                return math.factorial(int(n))
                
            safe_dict['factorial'] = factorial
            
            result = eval(expr, {"__builtins__": None}, safe_dict)
            await event.respond(f"üßÆ {args} = {result}")
            
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !calc –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

    # ========== –¢–ê–ô–ú–ï–† (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ==========
    async def timer_cmd(self, event):
        """!timer <seconds> [message] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        await event.delete()
        args = event.pattern_match.group(1)
        
        if not args:
            await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö!\n–ü—Ä–∏–º–µ—Ä: !timer 60 –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            return
            
        try:
            parts = args.split(maxsplit=1)
            seconds = float(parts[0])  # –†–∞–∑—Ä–µ—à–µ–Ω—ã –¥—Ä–æ–±–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã
            if seconds <= 0:
                raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            seconds = min(seconds, 86400)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 24 —á–∞—Å–∞
            message = parts[1] if len(parts) > 1 else "–í—Ä–µ–º—è –≤—ã—à–ª–æ!"
            
            await event.respond(f"‚è≥ –¢–∞–π–º–µ—Ä –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
            
            async def timer_callback():
                await asyncio.sleep(seconds)
                await event.respond(f"üîî {message} (—Ç–∞–π–º–µ—Ä {seconds} —Å–µ–∫.)")
                
            asyncio.create_task(timer_callback())
            
        except ValueError as e:
            await event.respond(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {str(e)}\n–ü—Ä–∏–º–µ—Ä: !timer 60 –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞: {str(e)}")

    # ========== –°–õ–£–ß–ê–ô–ù–´–ô –í–´–ë–û–† (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ==========
    async def choose_cmd(self, event):
        """!choose <option1> ; <option2> ... - –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        await event.delete()
        args = event.pattern_match.group(1)
        
        if not args:
            await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ ';'!\n–ü—Ä–∏–º–µ—Ä: !choose –ü–∏—Ü—Ü–∞ ; –°—É—à–∏ ; –ë—É—Ä–≥–µ—Ä")
            return
            
        options = [x.strip() for x in re.split(r';\s*', args) if x.strip()]
        
        if len(options) < 2:
            await event.respond("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
            return
            
        choice = random.choice(options)
        options_text = "\n".join(f"‚Ä¢ {opt}" for opt in options)
        await event.respond(f"üé≤ –Ø –≤—ã–±–∏—Ä–∞—é: {choice}!\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã:\n{options_text}")

    # ========== –ü–ï–†–ï–í–û–î–ß–ò–ö (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ==========
    async def translate_cmd(self, event):
        """!translate [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏ —Ä—É—Å—Å–∫–∏–º"""
        await event.delete()
        text = event.pattern_match.group(1)
        
        if not text:
            await event.respond(f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä: {self.PREFIX}translate –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
            return
            
        try:
            for attempt in range(3):
                try:
                    detected = self.translator.detect(text)
                    dest = 'en' if detected.lang == 'ru' else 'ru'
                    translation = self.translator.translate(text, dest=dest)
                    response = (
                        f"üî§ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ({detected.lang}):\n{text}\n\n"
                        f"üåç –ü–µ—Ä–µ–≤–æ–¥ ({dest}):\n{translation.text}"
                    )
                    await event.respond(response)
                    return
                except Exception as e:
                    if attempt == 2:
                        raise
                    await asyncio.sleep(1)
                    
        except Exception:
            try:
                translated = await self.fallback_translate(text)
                await event.respond(f"üåç (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥):\n{translated}")
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    async def fallback_translate(self, text):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ API –∫–ª—é—á–∞"""
        try:
            is_russian = bool(re.search('[–∞-—è–ê-–Ø]', text))
            lang_pair = 'ru-en' if is_russian else 'en-ru'
            
            url = "https://api.mymemory.translated.net/get"
            params = {'q': text, 'langpair': lang_pair}
            
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            
            if data.get('responseData', {}).get('translatedText'):
                return data['responseData']['translatedText']
                
            return await self.web_translate(text, is_russian)
        except Exception:
            raise Exception("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    async def web_translate(self, text, is_russian):
        """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥"""
        try:
            to_lang = 'en' if is_russian else 'ru'
            url = f"https://www.bing.com/translator?text={requests.utils.quote(text)}&to={to_lang}"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=15)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            translation = soup.find('textarea', {'id': 'tta_output_ta'})
            if translation:
                return translation.text.strip()
                
            raise Exception("–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

    # ========== –†–ê–ù–î–û–ú–ù–´–ô –§–ê–ö–¢ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ==========
    async def fact_cmd(self, event):
        """!fact - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"""
        await event.delete()
        fact = random.choice(self.facts)
        await event.respond(f"üìö **–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:**\n\n{fact}")

    # ========== –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ==========
    async def delm_cmd(self, event):
        """!delm [—á–∏—Å–ª–æ] - –£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await event.delete()
        args = event.pattern_match.group(1)
    
        if not args or not args.isdigit():
            await event.respond(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!\n–ü—Ä–∏–º–µ—Ä: {self.PREFIX}delm 3")
            return
        
        count = int(args)
        if count <= 0 or count > 100:
            await event.respond("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")
            return
        
        try:
            messages = []
            async for message in self.client.iter_messages(
                await event.get_chat(),
                from_user="me" if event.is_private else event.sender_id,
                limit=count
            ):
                messages.append(message)
            
            if messages:
                await self.client.delete_messages(await event.get_chat(), messages)
            else:
                await event.respond("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", delete_after=5)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")